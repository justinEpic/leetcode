# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def longestConsecutive(self, root: Optional[TreeNode]) -> int:
        _, _, longest_length = self.helper(root)
        return longest_length
        
    def helper(self, root):
        if root is None:
            return 0, 0, 0
        #incr or decr means value itself is increasing or descreasing compared with child
        left_incr, left_decr, left_longest = self.helper(root.left)
        right_incr, right_decr, right_longest = self.helper(root.right)
        
        cur_incr, cur_decr = 0, 0
        if root.left:
            if root.left.val + 1 == root.val:
                cur_incr = max(cur_incr, left_incr + 1)
            if root.left.val - 1 == root.val:
                cur_decr = max(cur_decr, left_decr + 1)
        if root.right:
            if root.right.val + 1 == root.val:
                cur_incr = max(cur_incr, right_incr + 1)
            if root.right.val - 1 == root.val:
                cur_decr = max(cur_decr, right_decr + 1)
        
        longest = max(left_longest, right_longest, cur_incr + cur_decr + 1)
        
        return cur_incr, cur_decr, longest
                
                
        
