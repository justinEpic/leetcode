# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        nums = self.inorder(root)
        x, y = self.find_two_swapped(nums)
        self.recover(x, y, root, 2)
    
    def inorder(self, root):
        return self.inorder(root.left) + [root.val] + self.inorder(root.right) if root else []
    
    def find_two_swapped(self, nums):
        x = y = None
        for i in range(len(nums) - 1):
            if nums[i+1] < nums[i]:
                y = nums[i+1]
                # first swap
                if x == None:
                    x = nums[i]
                # second swap occurence
                else:
                    break
        return x, y
    
    def recover(self, x, y, root, count):
        if count == 0:
            return
        if root:
            if root.val == x or root.val == y:
                root.val = y if root.val == x else x
                count -= 1
            self.recover(x, y, root.left, count)
            self.recover(x, y, root.right, count)
    
        
